/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.36
 * Generated at: 2025-03-17 16:08:08 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.authentication;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class signIn_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("    <title>Login - Mega City Cab</title>\r\n");
      out.write("    <style>\r\n");
      out.write("        /* General Styles */\r\n");
      out.write("        body {\r\n");
      out.write("            font-family: Arial, sans-serif;\r\n");
      out.write("            background-color: #000000; /* Black background */\r\n");
      out.write("            margin: 0;\r\n");
      out.write("            padding: 0;\r\n");
      out.write("            display: flex;\r\n");
      out.write("            flex-direction: column;\r\n");
      out.write("            justify-content: center;\r\n");
      out.write("            align-items: center;\r\n");
      out.write("            height: 100vh;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        /* Logo Styles */\r\n");
      out.write("        .logo {\r\n");
      out.write("            text-align: center;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .logo img {\r\n");
      out.write("            height: 120px; /* Adjust logo size */\r\n");
      out.write("            width: auto;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        /* Login Container Styles */\r\n");
      out.write("        .login-container {\r\n");
      out.write("            background-color: #FFD700; /* Yellow background */\r\n");
      out.write("            padding: 40px;\r\n");
      out.write("            border-radius: 10px;\r\n");
      out.write("            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n");
      out.write("            width: 100%;\r\n");
      out.write("            max-width: 400px;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .login-container h2 {\r\n");
      out.write("            text-align: center;\r\n");
      out.write("            color: #000000; /* Black text */\r\n");
      out.write("            margin-bottom: 20px;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        /* Form Styles */\r\n");
      out.write("        #loginForm {\r\n");
      out.write("            display: flex;\r\n");
      out.write("            flex-direction: column;\r\n");
      out.write("            gap: 15px;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        #loginForm label {\r\n");
      out.write("            font-size: 16px;\r\n");
      out.write("            color: #000000; /* Black text */\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        #loginForm input[type=\"email\"],\r\n");
      out.write("        #loginForm input[type=\"password\"] {\r\n");
      out.write("            padding: 10px;\r\n");
      out.write("            font-size: 16px;\r\n");
      out.write("            border: 1px solid #ccc;\r\n");
      out.write("            border-radius: 5px;\r\n");
      out.write("            outline: none;\r\n");
      out.write("            transition: border-color 0.3s;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        #loginForm input[type=\"email\"]:focus,\r\n");
      out.write("        #loginForm input[type=\"password\"]:focus {\r\n");
      out.write("            border-color: #000000; /* Black border on focus */\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        #loginForm button[type=\"submit\"] {\r\n");
      out.write("            padding: 12px 20px;\r\n");
      out.write("            background-color: #000000; /* Black background */\r\n");
      out.write("            color: #FFD700; /* Yellow text */\r\n");
      out.write("            border: none;\r\n");
      out.write("            border-radius: 5px;\r\n");
      out.write("            cursor: pointer;\r\n");
      out.write("            font-size: 16px;\r\n");
      out.write("            transition: background-color 0.3s;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        #loginForm button[type=\"submit\"]:hover {\r\n");
      out.write("            background-color: #333333; /* Darker black on hover */\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        /* Signup Text Styles */\r\n");
      out.write("        .signup-text {\r\n");
      out.write("            text-align: center;\r\n");
      out.write("            margin-top: 20px;\r\n");
      out.write("            font-size: 14px;\r\n");
      out.write("            color: #000000; /* Black text */\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .signup-text a {\r\n");
      out.write("            color: #000000; /* Black text */\r\n");
      out.write("            text-decoration: underline; /* Underline for links */\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .signup-text a:hover {\r\n");
      out.write("            color: #333333; /* Darker black on hover */\r\n");
      out.write("        }\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <!-- Logo -->\r\n");
      out.write("    <div class=\"logo\">\r\n");
      out.write("        <img src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/images/logo.png\" alt=\"Mega City Cab Logo\">\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("    <!-- Login Container -->\r\n");
      out.write("    <div class=\"login-container\">\r\n");
      out.write("        <h2>Login</h2>\r\n");
      out.write("        <form id=\"loginForm\" action=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/signIn\" method=\"post\">\r\n");
      out.write("            <label for=\"email\">Email:</label>\r\n");
      out.write("            <input type=\"email\" id=\"email\" name=\"email\" required>\r\n");
      out.write("            \r\n");
      out.write("            <label for=\"password\">Password:</label>\r\n");
      out.write("            <input type=\"password\" id=\"password\" name=\"password\" required>\r\n");
      out.write("            \r\n");
      out.write("            <button type=\"submit\">Login</button>\r\n");
      out.write("        </form>\r\n");
      out.write("        <p class=\"signup-text\">New Here? <a href=\"signUp.jsp\">Sign Up</a></p>\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("    <script>\r\n");
      out.write("        document.getElementById(\"loginForm\").addEventListener(\"submit\", function(event) {\r\n");
      out.write("            event.preventDefault(); // Prevent default form submission\r\n");
      out.write("\r\n");
      out.write("            const formData = new FormData(this);\r\n");
      out.write("\r\n");
      out.write("            fetch(this.action, {\r\n");
      out.write("                method: \"POST\",\r\n");
      out.write("                body: new URLSearchParams(formData), // Convert FormData to URL-encoded format\r\n");
      out.write("                headers: {\r\n");
      out.write("                    \"Content-Type\": \"application/x-www-form-urlencoded\" // Set the correct Content-Type\r\n");
      out.write("                }\r\n");
      out.write("            })\r\n");
      out.write("            .then(response => response.text())\r\n");
      out.write("            .then(data => {\r\n");
      out.write("                console.log(\"Response from server:\", data); // Debug log\r\n");
      out.write("                if (data === \"admin\") {\r\n");
      out.write("                    window.location.href = \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/admin/dashboard.jsp\"; // Redirect to admin dashboard\r\n");
      out.write("                } else if (data === \"customer\") {\r\n");
      out.write("                    window.location.href = \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/customer/home.jsp\"; // Redirect to customer dashboard\r\n");
      out.write("                } else if (data === \"failure\") {\r\n");
      out.write("                    alert(\"Login failed. Please check your email and password.\");\r\n");
      out.write("                }\r\n");
      out.write("            })\r\n");
      out.write("            .catch(error => {\r\n");
      out.write("                console.error(\"Error:\", error);\r\n");
      out.write("                alert(\"An error occurred. Please try again.\");\r\n");
      out.write("            });\r\n");
      out.write("        });\r\n");
      out.write("    </script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
