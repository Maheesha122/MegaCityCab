/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.36
 * Generated at: 2025-03-12 18:16:58 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.customer;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class booking_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("    <title>Booking</title>\r\n");
      out.write("    <style>\r\n");
      out.write("        /* General styling */\r\n");
      out.write("        body {\r\n");
      out.write("            font-family: Arial, sans-serif;\r\n");
      out.write("            background-color: #000;  /* Black background */\r\n");
      out.write("            margin: 0;\r\n");
      out.write("            padding: 0;\r\n");
      out.write("            color: #fff; /* White text color */\r\n");
      out.write("        }\r\n");
      out.write("        /* Container to center the content */\r\n");
      out.write("        .container {\r\n");
      out.write("            width: 70%;\r\n");
      out.write("            margin: 0 auto;\r\n");
      out.write("            background-color: #ffcc00;  /* Yellow background */\r\n");
      out.write("            padding: 30px;\r\n");
      out.write("            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n");
      out.write("            border-radius: 10px;\r\n");
      out.write("        }\r\n");
      out.write("        h1 {\r\n");
      out.write("            color: #333;\r\n");
      out.write("            text-align: center;\r\n");
      out.write("            margin-bottom: 20px;\r\n");
      out.write("        }\r\n");
      out.write("        label {\r\n");
      out.write("            font-size: 16px;\r\n");
      out.write("            margin-bottom: 5px;\r\n");
      out.write("            display: inline-block;\r\n");
      out.write("            color: #333;\r\n");
      out.write("        }\r\n");
      out.write("        select, input[type=\"date\"], input[type=\"time\"] {\r\n");
      out.write("            width: 100%;\r\n");
      out.write("            padding: 10px;\r\n");
      out.write("            margin: 10px 0 20px;\r\n");
      out.write("            border: 2px solid #ccc;\r\n");
      out.write("            border-radius: 5px;\r\n");
      out.write("            background-color: #fff;\r\n");
      out.write("        }\r\n");
      out.write("        button {\r\n");
      out.write("            width: 100%;\r\n");
      out.write("            padding: 15px;\r\n");
      out.write("            background-color: #000; /* Black button */\r\n");
      out.write("            color: #fff;\r\n");
      out.write("            border: none;\r\n");
      out.write("            border-radius: 5px;\r\n");
      out.write("            font-size: 18px;\r\n");
      out.write("            cursor: pointer;\r\n");
      out.write("        }\r\n");
      out.write("        button:hover {\r\n");
      out.write("            background-color: #333; /* Darker shade of black on hover */\r\n");
      out.write("        }\r\n");
      out.write("        .form-group {\r\n");
      out.write("            margin-bottom: 20px;\r\n");
      out.write("        }\r\n");
      out.write("        .dropdown-container {\r\n");
      out.write("            display: flex;\r\n");
      out.write("            justify-content: space-between;\r\n");
      out.write("            gap: 10px;\r\n");
      out.write("        }\r\n");
      out.write("        .dropdown-container select {\r\n");
      out.write("            width: 48%;\r\n");
      out.write("        }\r\n");
      out.write("        .date-time-container {\r\n");
      out.write("            display: flex;\r\n");
      out.write("            justify-content: space-between;\r\n");
      out.write("            gap: 10px;\r\n");
      out.write("        }\r\n");
      out.write("        .date-time-container input {\r\n");
      out.write("            width: 48%;\r\n");
      out.write("        }\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    \r\n");
      out.write("    <div class=\"container\">\r\n");
      out.write("        <h1>Booking Page</h1>\r\n");
      out.write("\r\n");
      out.write("        <form id=\"bookingForm\">\r\n");
      out.write("            <div class=\"form-group\">\r\n");
      out.write("                <label for=\"vehicle\">Select Vehicle:</label>\r\n");
      out.write("                <select id=\"vehicleType\" name=\"vehicleType\"></select>\r\n");
      out.write("            </div>\r\n");
      out.write("\r\n");
      out.write("            <div class=\"form-group dropdown-container\">\r\n");
      out.write("                <div>\r\n");
      out.write("                    <label for=\"pickup\">Pickup Location:</label>\r\n");
      out.write("                    <select id=\"pickup\" name=\"pickup\"></select>\r\n");
      out.write("                </div>\r\n");
      out.write("\r\n");
      out.write("                <div>\r\n");
      out.write("                    <label for=\"drop\">Drop Location:</label>\r\n");
      out.write("                    <select id=\"drop\" name=\"drop\"></select>\r\n");
      out.write("                </div>\r\n");
      out.write("            </div>\r\n");
      out.write("\r\n");
      out.write("            <div class=\"form-group date-time-container\">\r\n");
      out.write("                <div>\r\n");
      out.write("                    <label for=\"date\">Select Date:</label>\r\n");
      out.write("                    <input type=\"date\" id=\"date\" name=\"date\">\r\n");
      out.write("                </div>\r\n");
      out.write("\r\n");
      out.write("                <div>\r\n");
      out.write("                    <label for=\"time\">Select Time:</label>\r\n");
      out.write("                    <input type=\"time\" id=\"time\" name=\"time\">\r\n");
      out.write("                </div>\r\n");
      out.write("            </div>\r\n");
      out.write("\r\n");
      out.write("            <button type=\"submit\">Calculate Fare</button>\r\n");
      out.write("        </form>\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("    <script>\r\n");
      out.write("        // Mock data (Replace with API call or dynamic data)\r\n");
      out.write("        const uniqueVehicleNames = [\"Car\", \"Van\", \"Bus\", \"Bike\"];\r\n");
      out.write("        const distances = {\r\n");
      out.write("            \"Colombo\": {\"Kandy\": 115, \"Galle\": 130},\r\n");
      out.write("            \"Kandy\": {\"Colombo\": 115, \"Nuwara Eliya\": 75},\r\n");
      out.write("            \"Galle\": {\"Colombo\": 130, \"Matara\": 40}\r\n");
      out.write("        };\r\n");
      out.write("\r\n");
      out.write("        // Populate vehicle dropdown\r\n");
      out.write("        function populateVehicles() {\r\n");
      out.write("            const vehicleSelect = document.getElementById(\"vehicleType\");\r\n");
      out.write("            uniqueVehicleNames.forEach(vehicle => {\r\n");
      out.write("                let option = document.createElement(\"option\");\r\n");
      out.write("                option.value = vehicle;\r\n");
      out.write("                option.textContent = vehicle;\r\n");
      out.write("                vehicleSelect.appendChild(option);\r\n");
      out.write("            });\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        // Populate pickup locations\r\n");
      out.write("        function populatePickupLocations() {\r\n");
      out.write("            const pickupSelect = document.getElementById(\"pickup\");\r\n");
      out.write("            Object.keys(distances).forEach(location => {\r\n");
      out.write("                let option = document.createElement(\"option\");\r\n");
      out.write("                option.value = location;\r\n");
      out.write("                option.textContent = location;\r\n");
      out.write("                pickupSelect.appendChild(option);\r\n");
      out.write("            });\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        // Populate drop locations based on selected pickup\r\n");
      out.write("        function populateDropLocations() {\r\n");
      out.write("            const pickup = document.getElementById(\"pickup\").value;\r\n");
      out.write("            const dropSelect = document.getElementById(\"drop\");\r\n");
      out.write("            dropSelect.innerHTML = \"\"; // Clear previous options\r\n");
      out.write("\r\n");
      out.write("            if (distances[pickup]) {\r\n");
      out.write("                Object.entries(distances[pickup]).forEach(([location, distance]) => {\r\n");
      out.write("                    let option = document.createElement(\"option\");\r\n");
      out.write("                    option.value = location;\r\n");
      out.write("                    option.textContent = `");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${location}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(' ');
      out.write('-');
      out.write(' ');
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${distance}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(" km`;\r\n");
      out.write("                    dropSelect.appendChild(option);\r\n");
      out.write("                });\r\n");
      out.write("            }\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        // Handle form submission\r\n");
      out.write("        document.getElementById(\"bookingForm\").addEventListener(\"submit\", function (event) {\r\n");
      out.write("            event.preventDefault();\r\n");
      out.write("\r\n");
      out.write("            const formData = {\r\n");
      out.write("                vehicleType: document.getElementById(\"vehicleType\").value,\r\n");
      out.write("                pickup: document.getElementById(\"pickup\").value,\r\n");
      out.write("                drop: document.getElementById(\"drop\").value,\r\n");
      out.write("                date: document.getElementById(\"date\").value,\r\n");
      out.write("                time: document.getElementById(\"time\").value\r\n");
      out.write("            };\r\n");
      out.write("\r\n");
      out.write("            // Store data for next page (optional)\r\n");
      out.write("            localStorage.setItem(\"bookingData\", JSON.stringify(formData));\r\n");
      out.write("\r\n");
      out.write("            // Redirect to confirmation page\r\n");
      out.write("            window.location.href = \"confirm_booking.jsp\";\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        // Initialize dropdowns\r\n");
      out.write("        populateVehicles();\r\n");
      out.write("        populatePickupLocations();\r\n");
      out.write("        populateDropLocations();\r\n");
      out.write("\r\n");
      out.write("        // Update drop locations when pickup changes\r\n");
      out.write("        document.getElementById(\"pickup\").addEventListener(\"change\", populateDropLocations);\r\n");
      out.write("    </script>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
